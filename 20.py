print((lambda m:(lambda d:(lambda n,g:(lambda p,r:(lambda u:((lambda r:r[0]*r[1]*r[2]*r[3])(u),([[len(d[a] & d[b]) > 0 and (n[a].add(b) or n[b].add(a)) for b in d if a != b] for a in d]*0 or[g.append(list()) or [g[i].append(p(i,j,u)) for j in range(12)]  for i in range(12)]*0 or(lambda d:(lambda m:[(lambda a: m[0].append(a) if "".join([h[0] for h in a]) == "".join([h[-1] for h in m[0][x-1]]) else False)(r(r,d[g[0][x]],i)) for x in range(2,12) for i in range(8)]*0 or[(lambda a:(lambda: m[y].append(a) if y<len(m) else m.append(list()) or m[y].append(a))() if a[0] == m[y-1][x][-1] else False)(r(r,d[g[y][x]],i))for y in range(1, 12) for x in range(12) for i in range(8)]*0 or(lambda m,q:"".join(m).count("#") - max([(lambda a: sum([15 for i in range(96-2) for j in range(96-19) if sum([a[i+y][j+x] == "#" for y,x in q]) == 15]))(r(r,m,k)) for k in range(8)]))(["".join([m[i][k][j][1:-1] for k in range(12)]) for i in range(12) for j in range(1,10-1)], [(0,18),(1,0),(1,5),(1,6),(1,11),(1,12),(1,17),(1,18),(1,19),(2,1),(2,4),(2,7),(2,10),(2,13),(2,16)]))((lambda m: [h for h in m if h][0])([(lambda a,b,c: [[a,c]] if a[-1] == b[0] and "".join([h[-1] for h in a]) == "".join([h[0] for h in c]) else False)(r(r,d[g[0][0]],i),r(r,d[g[1][0]],j),r(r,d[g[0][1]],k)) for k in range(8) for j in range(8) for i in range(8)])))({k:v for k,v in map(lambda a: (lambda s: (int(s[0][5:-1]),s[1:]))(a.splitlines()),m)}))))([a for a in d if sum([len(d[a] & d[b]) for b in d if a != b]) == 4]))(lambda i,j,u: u[0] if i == j == 0 else [h for h in n[g[0][j-1]] if len(n[h]) < 4 and not h in g[0] and (len(g)<=1 or h != g[1][0])][0] if i == 0 else [h for h in n[g[i-1][0]] if len(n[h]) < 4 and not h in [a[0] for a in g if len(a)>0] and h != g[0][1]][0] if j == 0 else (n[g[i-1][j]] & n[g[i][j-1]] - {g[i-1][j-1]}).pop(),lambda f,a,t: a if t == 0 else f(f, a[::-1], t - 4) if t > 3 else f(f,["".join([h[i] for h in a])[::-1] for i in range(len(a))],t-1)))({k:set() for k in d},list(list())))({k:v for k,v in map(lambda a: (lambda s: (int(s[0][5:-1]),(lambda s:(lambda r: set(r).union({h[::-1] for h in r}))([s[0], s[-1], "".join([h[0] for h in s]), "".join([h[-1] for h in s])]))(s[1:])))(a.splitlines()),m)}))(open("20").read().split("\n\n"),))