(lambda H:[print("Day: %2d part 1: %15s, part 2: %15s"%(I+1,V[0],V[1])) for I,V in enumerate(H)])([ (lambda x: (max([a * (2020-a) for a in x if 2020-a in x]), max(max([[a*b*(2020-a-b) for a in x if 2020-a-b in x] for b in x]))))({int(i) for i in open("1").readlines()}), (lambda h: (len([1 for e in h if e[3].count(e[2]) >= e[0] and e[3].count(e[2]) <= e[1]]), len([1 for e in h if len(e[3]) > e[1]-1 and ((e[3][e[0]-1] == e[2]) ^ (e[3][e[1]-1] == e[2]))])))([(lambda x: (lambda y: [int(y[0]), int(y[1])])(x[0].split("-")) + [x[1][0], x[2]])(a.split()) for a in open("2").readlines()]), (lambda r: (r[1], (lambda g, m: g(g,m))(lambda y, x: x[0] if len(x) == 1 else x.pop(0) * y(y, x), r)))((lambda h: [(lambda f,*a: f(f,*a))(lambda f,h,p,i,j: 0 if i == len(h) else (p == p // 1 and h[i][int(p)] == "#") + f(f,h,(p+j) % len(h[0]),i+1, j),h,0,0,a) for a in [1,3,5,7,0.5]])(open("3").read()[:-1].split("\n"))), (lambda h: (int(h.real), int(h.imag)))(sum([1 + 1j * (1920<=int(p["byr"])<=2002 and 2010<=int(p["iyr"])<=2020 and 2020<=int(p["eyr"])<=2030 and p["ecl"]in["amb","blu","brn","gry","grn","hzl","oth"] and ((p["hgt"].endswith("cm") and 150<=int(p["hgt"][:-2])<=193) or (p["hgt"].endswith("in")and 59<=int(p["hgt"][:-2])<=76)) and len(p["hcl"]) == 7 and p["hcl"][0] == "#" and all(c in "0123456789abcdef" for c in p["hcl"][1:])and len(p["pid"]) == 9 and all(map(str.isdigit, p["pid"]))) for p in [{k:v for k,v in (x.split(":") for x in d) if k != "cid"} for d in [v.split() for v in open("4").read().split("\n\n")]] if len(p) == 7])), (lambda a: ((a.sort() != None) + max(a), max([a[i]+1 for i in range(len(a)-1) if a[i] + 1 != a[i+1]])))([8*int(a[:7], 2)+int(a[7:], 2) for a in open("5").read()[:-1].replace("F", "0").replace("B", "1").replace("R", "1").replace("L", "0").split()]), (lambda q:(sum([len({a for a in h.replace("\n","")}) for h in q]),sum([len(set.intersection(*[set(a)for a in h.split("\n")]))for h in q])))(open("6").read()[:-1].split("\n\n")), (lambda r:(sum([(lambda a:lambda v:a(a,v))(lambda s,x:True if"shinygold"in r[x]else sum([s(s, b)for b in r[x]])>0)(KEKW)for KEKW in r]),(lambda a, v:a(a,v))(lambda s,x:sum([(s(s,xD)+1)*r[x][xD] for xD in r[x]]), "shinygold")))({"".join(h[0].split()):{k.split()[1]+k.split()[2]:int(k.split()[0])for k in h[1].split(",")if not"no other"in k}for h in[h.split("contain")for h in open("7").read()[:-1].replace("bags","").replace("bag","").replace(".","").split("\n")]}), (lambda D:((lambda f,*a:f(f,*a))(lambda f,d,r,i,a:a if i in r else f(f,d,r|{i}, (not'j'in d[i] or int(d[i][4:]))+i,('a'in d[i])*int(d[i][4:])+a),D,set(),0,0),max([(lambda f,*a:f(f,*a))(lambda f,d,r,i,a,s:-1 if i in r else a if i >= len(D) else f(f,d,r|{i}, ((not'j'in d[i] != i!=s)or int(d[i][4:]))+i,('a'in d[i])*int(d[i][4:])+a, x),D,set(),0,0,x) for x in range(len(D))])))([*open("8")]), (lambda f,*y: f(f,*y))(lambda f, a, i, g, h: (a[i], h(a, a[i])) if g(a[i-25:i], a[i]) else f(f, a, i+1, g, h), [int(n) for n in open("9").readlines()], 26,lambda c,d: not any(i+j==d for i in c for j in c),lambda e,f: max(max([[max(e[i:j]) + min(e[i:j]) for i in range(j-1) if sum(e[i:j]) == f] for j in range(1, len(e))]))), (lambda h:((lambda m: int(m.real * m.imag))(sum([(h[i+1] == h[i] + 1) + 1j* (h[i+1] == h[i] + 3) for i in range(len(h)-1)])),(lambda s:(lambda f,*x: f(f,*x))(lambda g, i: s[i] if i in s else sum([(lambda k, v: v + bool(s.update({k: v})))(i+j, g(g, i+j)) for j in [1,2,3] if i+j in h]),0))({max(h): 1})))((lambda a: [0]+a+[max(a)+3] if bool(a.sort()) else [0]+a+[max(a)+3])([int(i) for i in open("10").readlines()])), (lambda a:("".join((lambda f,*x: f(f,*x))(lambda g, p, h, w: c if p == (c :=(lambda x: ["".join([(lambda c, o: "#" if c == "L" and o.count("#") == 0 else "L" if c == "#" and o.count("#") > 4 else c)(x[j][i], (lambda a, i, j: "".join([b[max(i-1,0):i+2] for b in a[max(j-1,0):j+2]]))(x,i,j)) for i in range(w)]) for j in range(h)])(p)) else g(g, c, h, w),a, len(a), len(a[0]))).count("#"),"".join((lambda f,*x: f(f,*x))(lambda g, p, h, w:c if p == (c :=(lambda x: ["".join([(lambda c, o: "#" if c == "L" and o.count("#") == 0 else "L" if c == "#" and o.count("#") > 4 else c)(x[j][i],"".join([(lambda k,*y: k(k,*y))(lambda t, a, i,j, c,s, h,w: "." if not (0 <= j+s < h and 0 <= i+c < w) else a[j+s][i+c] if a[j+s][i+c] != "." else t(t,a,i+c,j+s,c,s,h,w),p, i,j, c,s, h,w)for c in range(-1,2) for s in range(-1,2) if c != 0 or s != 0])) for i in range(w)]) for j in range(h)])(p)) else g(g, c, h, w),a, len(a), len(a[0]))).count("#")))(open("11").readlines()), (lambda h: (lambda f, *x: f(f,*x))(lambda g, p, s, c, i, a, q, w: (int(abs(p.real) + abs(p.imag)), int(abs(q.real + abs(q.imag)))) if i == len(a) else g(g, p + (1j * ((a[i][0] == "N") - (a[i][0] == "S")) + (a[i][0] == "E") - (a[i][0] == "W") +(a[i][0] == "F") * s[c]) * int(a[i][1:]),s, (c + ((a[i][0] == "R") - (a[i][0] == "L")) * (int(a[i][1:]) // 90)) % 4, i+1, a,q + (a[i][0] == "F") * w * int(a[i][1:]),(w + (1j * ((a[i][0] == "N") - (a[i][0] == "S")) + (a[i][0] == "E") - (a[i][0] == "W")) * int(a[i][1:])) * (-1j)**(((((a[i][0] == "R") - (a[i][0] == "L")) * int(a[i][1:])) // 90) % 4),), 0, [1, -1j, -1, 1j], 0, 0, h, 0, 10 + 1j))(open("12").readlines()), (lambda a: ((lambda h: h[0] * h[1])(min([(-int(a[0]) % int(n), int(n)) for n in a[1].split(",") if n != "x"], key=lambda x: x[0])),(lambda d, p: sum([h[0] * ((lambda f,*x: f(f,*x))(lambda g, n, m, x0, x1,m0: x1 + m0 * (x1 < 0) if n <= 1 else g(g, m, n % m, x1 - (n // m) * x0, x0, m0), p//h[1], h[1], 0, 1, h[1])) * (p//h[1]) for h in d]) % p)(sorted([(-k, int(v)) for k,v in enumerate(a[1].split(",")) if v != "x"], key=lambda t: t[1], reverse=True), (lambda f,*x: f(f,*x))(lambda g,r,i: 1 if i == len(r) else int(r[i]) * g(g,r,i+1) if r[i] != "x" else g(g,r,i+1), a[1].split(","), 0))))(open("13").readlines()), (lambda a, d, m, r:(([(lambda h,d,m: m.update({0:int(h[1].replace("X", "1"), 2), 1:int(h[1].replace("X", "0"), 2)}) if h[0] == "mask" else d.update({h[0]: (h[1] & m[0]) | m[1] }))(h,d,m) for h in a] and sum(d.values()))+ bool(d.clear()),([(lambda h,d,m: m.update({0:h[1].replace("1", "0"), 1:int(h[1].replace("X", "0"), 2)}) if h[0] == "mask" else r(lambda g, d, o, l, k, n: d.update({(k ^ int(o,2)) | l: n}) if not "X" in o else g(g,d,o.replace("X", "1", 1),l,k,n) or g(g,d,o.replace("X", "0", 1),l,k,n),d, m[0], m[1], h[0], h[1]))(h,d,m) for h in a] and sum(d.values()))))([(lambda k : k if k[0] == "mask" else [int(k[0][4:-1]), int(k[1])])(a.split(" = ")) for a in open("14").readlines()], dict(), dict(), lambda f, *x: f(f,*x)), (lambda f,s,h: (f(s,h[0]), f(s,h[1])))(lambda s, n:(lambda s, d, h, n:[(lambda d, i, p, h:i-p + bool(h.update({-1: d[i-p]+1}) or d.update({i-p:i}))if i-p in d else i-p + bool(h.update({-1: i+1}) or d.update({i-p:i})))(d, i, h[-1], h)for i in range(len(s), n)])(s,{v:k for k,v in enumerate(s)},{-1: len(s)}, n)[n-len(s)-1],[int(a) for a in open("15").read().split(",")], [2020,30000000]), (lambda r:((lambda s, e:sum(sum([int(c) for c in n.split(",") if not int(c) in s]) for n in e))(set().union(*[{i for i in range(int(w.split("-")[0]),int(w.split("-")[1])+1)} for w in r[0].split() if "-" in w]), r[2].split()[2:]),(lambda v, t, d: (lambda f, *x: f(f,*x))(lambda g, v, d, t: g(g,[(lambda h: (lambda: d.update({h.index(True) : v.index(h)}) if sum(h) == 1 else False)() or [not k in d and h[k] for k in range(len(h))])(h) for h in v],d,t)if len(d) < len(t) else int(t[d[0]])*int(t[d[1]])*int(t[d[2]])*int(t[d[3]])*int(t[d[4]])*int(t[d[5]]), v, d, t))((lambda s: (lambda c: [[a.issubset(b) for b in s] for a in c])((lambda h: [{int(k[i]) for k in h} for i in range(len(h[0]))])([a.split(",") for a in r[2].split("\n")[1:] if all([int(x) in set().union(*s) for x in a.split(",")])])))([(lambda k, f: f(k[0][-3:], k[1][:3]).union(f(k[1][-3:], k[2])))(h.split("-"), lambda a,b: {c for c in range(int(a), int(b)+1)}) for h in r[0].split("\n")]),r[1].split()[2].split(","),dict())))(open("16").read().split("\n\n")), (lambda y: ((lambda f,*x: f(f,*x))(lambda g, s, t, o, h: sum([sum([k.count("#") for k in h]) for h in s]) if h == 6 else g(g, [["".join([t(s[i][j][k], o(i,j,k,s)) for k in range(len(s[i][j]))]) for j in range(len(s[i]))] for i in range(len(s))],t, o, h+1),y, lambda c, o: "#" if (c=="." and o.count("#")==3) or (c=="#" and o.count("#") in [3,4]) else ".",lambda i,j,k,s: "".join(["".join([c[max(k-1,0):k+2] for c in b[max(j-1,0):j+2]]) for b in s[max(i-1,0):i+2]]), 0), (lambda f,*x: f(f,*x))(lambda g, s, t, o, h: sum([sum([sum([k.count("#") for k in l]) for l in h]) for h in s]) if h == 6 else g(g, [[["".join([t(s[i][j][k][l], o(i,j,k,l,s)) for l in range(len(s[i][j][k]))]) for k in range(len(s[i][j]))] for j in range(len(s[i]))] for i in range(len(s))],t, o, h+1),[[["."*20]*20]*13]*6 + [y] + [[["."*20]*20]*13]*6,lambda c, o: "#" if (c=="." and o.count("#")==3) or (c=="#" and o.count("#") in [3,4]) else ".",lambda i,j,k,l,s: "".join(["".join(["".join([d[max(l-1,0):l+2] for d in c[max(k-1,0):k+2]]) for c in b[max(j-1,0):j+2]]) for b in s[max(i-1,0):i+2]]),0)))((lambda q: q + (lambda p: [p + ["."*6 + h + "."*6 for h in open("17").read().split("\n")] + p])(["."*20]*6) + q)([["."*20]*20]*6)), (lambda a,f,v:(lambda c,b,y: (y(c), y(b)))(lambda x: "("*x.count("*") + x.replace("*", ")*"),lambda x: "(" + x.replace("*", ")*(") + ")",lambda o: sum([int(f(lambda g,s: v(v,s,o) if not "(" in s else g(g,v(v,s,o)),h)) for h in a])))(open("18").readlines(), lambda f,*x: f(f,*x),lambda e,x,l: "("*(x.count(")")>x.count("(")) + x[:x.index("(")] + e(e, x[x.index("(")+1:],l) if "(" in x and x.index("(") < x.index(")") else e(e,x[:x.index(")")],l) + x[x.index(")")+1:] if ")" in x else str(eval(l(x)))), (lambda a:(lambda d,p:(lambda u:(lambda t:(lambda x:(len([y for y in a[1].split() if y in x]),len([y for y in a[1].split() if (lambda x,y,d,c: True if y in x else False if len(y) % c != 0 else(lambda h, d: (lambda s,t:(not (False in s) and t[-1]) or (False in s and s.index(False) > len(s)/2 and t[::-1].index(False) + s.index(False) >= len(s)))([e in d["42"] for e in h], [e in d["31"] for e in h]))([y[i:i+c] for i in range(0, len(y), c)],d))(x,y,d,8)])))(set(t(t, "0",0))))(lambda g,n,e: d[n] if n in d and isinstance(d[n], list) else n if n.isalpha() else g(g,n.split("|")[0],e) + g(g,n.split("|")[1],e) if "|" in n else (lambda s: p(g(g,s[0],e), g(g,s[1],e) if len(s)>1 else [""], g(g,s[2],e) if len(s)>2 else [""]))(n.split()) if " " in n else u(n,g(g,d[n],e))))(lambda k,v: d.update({k:v}) or v if k in d else v))({k:v for k,v in map(lambda s: (s.split(":")[0], s.split(":")[1]), a[0].split("\n"))},lambda a,b,c: [h+k+l for h in a for k in b for l in c]))(open("19").read().replace("\"","").split("\n\n")), (lambda m:(lambda d:(lambda n,g:(lambda p,r:(lambda u:((lambda r:r[0]*r[1]*r[2]*r[3])(u),([[len(d[a] & d[b]) > 0 and (n[a].add(b) or n[b].add(a)) for b in d if a != b] for a in d]*0 or[g.append(list()) or [g[i].append(p(i,j,u)) for j in range(12)] for i in range(12)]*0 or(lambda d:(lambda m:[(lambda a: m[0].append(a) if "".join([h[0] for h in a]) == "".join([h[-1] for h in m[0][x-1]]) else False)(r(r,d[g[0][x]],i)) for x in range(2,12) for i in range(8)]*0 or[(lambda a:(lambda: m[y].append(a) if y<len(m) else m.append(list()) or m[y].append(a))() if a[0] == m[y-1][x][-1] else False)(r(r,d[g[y][x]],i))for y in range(1, 12) for x in range(12) for i in range(8)]*0 or(lambda m,q:"".join(m).count("#") - max([(lambda a: sum([15 for i in range(96-2) for j in range(96-19) if sum([a[i+y][j+x] == "#" for y,x in q]) == 15]))(r(r,m,k)) for k in range(8)]))(["".join([m[i][k][j][1:-1] for k in range(12)]) for i in range(12) for j in range(1,10-1)], [(0,18),(1,0),(1,5),(1,6),(1,11),(1,12),(1,17),(1,18),(1,19),(2,1),(2,4),(2,7),(2,10),(2,13),(2,16)]))((lambda m: [h for h in m if h][0])([(lambda a,b,c: [[a,c]] if a[-1] == b[0] and "".join([h[-1] for h in a]) == "".join([h[0] for h in c]) else False)(r(r,d[g[0][0]],i),r(r,d[g[1][0]],j),r(r,d[g[0][1]],k)) for k in range(8) for j in range(8) for i in range(8)])))({k:v for k,v in map(lambda a: (lambda s: (int(s[0][5:-1]),s[1:]))(a.splitlines()),m)}))))([a for a in d if sum([len(d[a] & d[b]) for b in d if a != b]) == 4]))(lambda i,j,u: u[0] if i == j == 0 else [h for h in n[g[0][j-1]] if len(n[h]) < 4 and not h in g[0] and (len(g)<=1 or h != g[1][0])][0] if i == 0 else [h for h in n[g[i-1][0]] if len(n[h]) < 4 and not h in [a[0] for a in g if len(a)>0] and h != g[0][1]][0] if j == 0 else (n[g[i-1][j]] & n[g[i][j-1]] - {g[i-1][j-1]}).pop(),lambda f,a,t: a if t == 0 else f(f, a[::-1], t - 4) if t > 3 else f(f,["".join([h[i] for h in a])[::-1] for i in range(len(a))],t-1)))({k:set() for k in d},list(list())))({k:v for k,v in map(lambda a: (lambda s: (int(s[0][5:-1]),(lambda s:(lambda r: set(r).union({h[::-1] for h in r}))([s[0], s[-1], "".join([h[0] for h in s]), "".join([h[-1] for h in s])]))(s[1:])))(a.splitlines()),m)}))(open("20").read().split("\n\n"),), (lambda a,d:[[(lambda k,v: d.update({k:set(v) & d[k]}) if k in d else d.update({k:set(v)}))(k,h[0]) for k in h[1]] for h in a]*0 or (lambda u: (sum([len([1 for e in h[0] if not e in u]) for h in a]), (lambda:[[[d.update({h: d[h] - d[k]}) for h in d if h != k] for k in d if len(d[k]) == 1] for i in d]*0 or ",".join([d[k].pop() for k in sorted(d.keys())]))()))(set().union(*d.values())))([(h[:h.index("(")].split(), h[h.index("(")+10:-2].split(", ")) for h in open("21").readlines()], dict()),(lambda l:((lambda a:(lambda f,*x:f(f,*x))(lambda g,a: (lambda b,c: a[b<c].extend(sorted([b,c], reverse=True)))(a[0].pop(0), a[1].pop(0)) or g(g,a) if len(a[0]) != 0 and len(a[1]) != 0 else sum([(i+1)*e for i,e in enumerate(a[len(a[0])==0][::-1])]),a))([h[:] for h in l]),(lambda f,r:sum([(i+1)*e for i,e in enumerate(r((False,0,0,l[0],l[1],set()),f,r)[2][::-1])]))(lambda a,b,s,r,f: (True, 0, a) if (t := (tuple(a),tuple(b)))in s or s.add(t) else (True,int(a<b),a+b) if len(a) == 0 or len(b) == 0 else(False, t:=r((False,0,0,a[1:a[0]+1],b[1:b[0]+1],set()),f,r), a0:=a[0], a := a[1:] + [a[0],b[0]]*(not t[1]),b := b[1:] + [b[0],a0]*(t[1]),s) if a[0] < len(a) and b[0] < len(b) else(False,0,a0 := a[0], a := a[1:] + [a[0],b[0]]*(a[0]>b[0]), b := b[1:] + [b[0],a0]*(a0<b[0]),s),lambda h,f,r: any(1 for i in range(1000000000) if (h:=f(h[3],h[4],h[5],r,f)) and h[0]) and h)))(list(map(lambda h: [int(i) for i in h.splitlines() if i.isnumeric()],open("22").read().split("\n\n")))),(lambda f,a:((lambda a,s,l,d,f,p: f(a[0],a,s,l,d)*0 or p(0,d))(a,9,100,{a[i-1]:a[i] for i in range(len(a))},f,lambda c,d: (lambda h: "".join([str(c+1) for c in h]))([(c:= d[c]) for i in range(8)])),(lambda a, s, l, d, f,p: d.update({a[-1]:len(a)}) or d.update({i:i+1 for i in range(len(a), s)}) or d.update({s-1: a[0]}) or f(a[0],a,s,l,d)*0 or p(d))(a, 1000000, 10000000, {a[i]:a[i+1] for i in range(len(a)-1)}, f,lambda d: (d[0]+1) * (d[d[0]]+1))))(lambda c,a,s,l,d:[(c := (lambda c: (t := [d[c], d[d[c]], d[d[d[c]]]], z := max([c - 1 - j for j in range(4) if (c - 1 - j) % s not in t]) % s,d.update({c:d[t[2]]}), d.update({t[2]: d[z]}), d.update({z: t[0]}), c := d[c]))(c)[5]) for i in range(l)], [int(c) - 1 for c in open("23").read()]),(lambda d:(lambda l:   (lambda s:(len(s),len([(s := s - {e for e in s if len({e+v for v in d.values() if e+v in s}) not in {1,2}} | {e for e in set().union(*[{c+v for v in d.values()} for c in s]) if len({e+v for v in d.values() if e+v in s}) == 2}) for i in range(100)][99])))({e for e in set(l) if l.count(e) % 2 == 1}))([sum((map(lambda x: d[x], [(lambda i: h[i] if i == 0 else h[i-1]+h[i] if h[i-1] in "ns" else h[i])(i) for i in range(len(h)) if h[i] not in "ns\n"]))) for h in open("24").readlines()]))({"e": 1, "w": -1, "ne": 1j, "nw": -1 + 1j, "se": 1 - 1j, "sw": -1j}),(lambda k,v: (max([(v := (v * 7) % 20201227,(lambda v: pow(k[v==k[0]], i+1, 20201227) if v in k else 0)(v))[1] for i in range(20201227)]), "FREEBIE"))([int(n) for n in open("25").readlines()],1)])